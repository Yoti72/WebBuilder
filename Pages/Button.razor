@page "/button"
@using WebBuilder.Components
<!--
using System.Text.Json
inject Blazored.LocalStorage.ILocalStorageService LocalStorage-->

<!-- Include scoped CSS file -->
<link rel="stylesheet" href="Button.razor.css" />


<!-- Structure of the Page -->
<body>
    <PageTitle>ButtonBuilder</PageTitle>
    <h1>Button Builder!</h1>
    <p>This is where you can customize your content.</p>

    <div class="container">

        <!-- Left box with input fields -->
        <div class="left-box">
            <div class="text-strip">Button Basics</div>

            <div class="input-field">
                <label for="button-color">Button Color:</label>
                <input type="color" @bind="ButtonColor" />
            </div>

            <div class="input-field">
                <label for="button-width">Button Width:</label>
                <input type="range" min="10" max="200" step="1" @bind="ButtonWidth" />
            </div>

            <div class="input-field">
                <label for="button-height">Button Height:</label>
                <input type="range" min="10" max="200" step="1" @bind="ButtonHeight" />
            </div>

            <div class="input-field">
                <label for="font">Font:</label>
                    <select @bind="ButtonFont">
                        <option value="Arial">Arial</option>
                        <option value="Helvetica">Helvetica</option>
                        <option value="Times New Roman">Times New Roman</option>
                        <!-- Add more font options as needed -->
                </select>
            </div>

            <div class="input-field">
                <label for="font-weight">Font Weight:</label>
                    <select @bind="ButtonFontWeight">
                        <option value="lighter">Lighter</option>
                        <option value="normal">Normal</option>
                        <option value="bold">Bold</option>
                        <option value="bolder">Bolder</option>
                    </select> 
            </div>

            <div class="input-field">
                <label for="font-size">Font Size:</label>
                    <input type="range" min="10" max="70" step="1" @bind="ButtonFontSize" />
            </div>

            <div class="input-field">
                <label for="text-color">Text Color:</label>
                    <input type="color" @bind="ButtonTextColor" />
            </div>

            <div class="input-field">
                <label for="corner-radius">Corner Radius:</label>
                    <input type="range" min="0" max="50" step="1" @bind="ButtonCornerRadius" />
            </div>
        </div>

        <!-- Right box with CustomButton component -->
        <div class="right-box">
            <div class="text-strip">Preview</div>
            <div class="button-preview">
                <CustomButton ButtonText="Click Me" ButtonColor="@ButtonColor" ButtonWidth="@ButtonWidth" ButtonHeight="@ButtonHeight" ButtonFont="@ButtonFont" ButtonFontWeight="@ButtonFontWeight" ButtonFontSize="@ButtonFontSize" ButtonTextColor="@ButtonTextColor" ButtonCornerRadius="@ButtonCornerRadius"
                    ButtonColorChanged="HandleButtonColorChanged" ButtonWidthChanged="HandleButtonWidthChanged" ButtonHeightChanged="HandleButtonHeightChanged" ButtonFontChanged="HandleButtonFontChanged" ButtonFontWeightChanged="HandleButtonFontWeightChanged" ButtonFontSizeChanged="HandleButtonFontSizeChanged" ButtonTextColorChanged="HandleButtonTextColorChanged" ButtonCornerRadiusChanged="HandleButtonCornerRadiusChanged" ></CustomButton> 
            </div
        </div>

       <!-- <button onclick="SaveButtonSettings">Save</button>-->
    </div>



 
</body>
<!-- End of the HTML Structure -->



<!-- Code Section -->
@code {
    private string ButtonWidth = "small"; // Default size
    private string ButtonHeight = "small"; // Default size
    private int textSize = 16; // Default text size
    private string ButtonColor = "#007bff"; // Default button color
    private string ButtonFont = "Arial"; // Default font
    private string ButtonFontWeight = "normal"; // Default font weight
    private string ButtonFontSize = "20px"; // Default font size
    private string ButtonTextColor = "#FFFFFF"; // Default text color
    private string ButtonCornerRadius = "10px"; // Default corner radius

    private async Task HandleButtonColorChanged(string color)
    {
        ButtonColor = color;
        await Task.CompletedTask;
    }
    private async Task HandleButtonWidthChanged(string width)
    {
        ButtonWidth = width;
        await Task.CompletedTask;
    }
    private async Task HandleButtonHeightChanged(string height)
    {
        ButtonHeight = height;
        await Task.CompletedTask;
    }

    private async Task HandleButtonFontChanged(string font)
    {
        ButtonFont = font;
        await Task.CompletedTask;
    }

    private async Task HandleButtonFontWeightChanged(string fontWeight)
    {
        ButtonFontWeight = fontWeight;
        await Task.CompletedTask;
    }
    
    private async Task HandleButtonFontSizeChanged(string fontSize)
    {
        ButtonFontSize = fontSize;
        await Task.CompletedTask;
    }

    private async Task HandleButtonTextColorChanged(string textColor)
    {
        ButtonTextColor = textColor;
        await Task.CompletedTask;
    }

    private async Task HandleButtonCornerRadiusChanged(string corRadius)
    {
        ButtonCornerRadius = corRadius;
        await Task.CompletedTask;
    }

    //private async Task SaveButtonSettings()
    //{
        // Save the button event
        // Button settings object
        <!--
        var buttonSettings = new
        {
            Color = ButtonColor,
            Width = ButtonWidth,
            Height = ButtonHeight,
            Font = ButtonFont,
            FontWeight = ButtonFontWeight,
            FontSize = ButtonFontSize,
            TextColor = ButtonTextColor,
            SizeOfText = textSize,
            CornerRadius = ButtonCornerRadius    
        };

        // Serialize button settings object to JSON
        var jsonString = JsonSerializer.Serialize(buttonSettings);

        // Store serialized JSON in local storage
        // For example:
        await LocalStorage.SetItemAsync("ButtonSettings", jsonString);-->
    //}
     

}


